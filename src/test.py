from quadrotor import Quadrotor, PID_param
from mujoco_py import load_model_from_path, MjSim, MjViewer
import numpy as np
import math
import sys

"""
Main Method
"""
if __name__ == "__main__":
    # List of Quadrotor objects
    Quadrotors = []
    # Number of quadrotors
    N = None

    # Ensure that model file passed in
    if len(sys.argv) < 2:
        print("\nUSAGE:   python3 main.py [Nquadrotor.xml]\n")
        exit(1)
    # Loads model from path and extracts N number of quadrotors
    try:
        filename = sys.argv[1]
        N = int(''.join(map(str,[int(x) for x in filename if x.isdigit()])))
        assert(int(N))
        model = load_model_from_path(filename)
    except:
        print("\nUSAGE:   python3 main.py [Nquadrotor.xml]\n")
        print("\nðŸš¨Ensure that you are using an XML file generated by gen_Ndrones.pyðŸš¨\n")
        exit(1)

    # represents a running simulation including its state
    sim = MjSim(model)

    # Display GUI showing the scene of an MjSim with a mouse-movable camera
    viewer = MjViewer(sim)

    # Returns a copy of the simulator state
    sim_state = sim.get_state()




    for i in range(N):
        # Append N quadrotors to object list
        Quadrotors.append(
            Quadrotor( PID_param(0.4, 0.05,
                            (8.0, 4, 0.5),
                            (4.0, 10.0, 0.0),
                            (4.0, 5.0, 0.0),
                            (10.0, 5.0, 0.0)),
                            sim, i
            )
        )


    while (True):
        t = sim.data.time
        for i in range(N):
            Quadrotors[i].control(np.array([math.cos(t)*2, math.sin(t)*2, 1]),     # xyz pose Desired
                        np.array([0, 0, 0, 0]), # Rotation Quaternion Desired
                        np.array([0, 0 , 0]),   # Roll Pitch Yaw Desired
                        (np.array([0,0,0]), np.array([0,0,0])),
                        (np.array([0,0,0]), np.array([0,0,0]))
            )
                    # These would be desired velocity and acceleration of pose and roll, pitch, yaw
                    #(np.array([dx[i], dy[i], dz[i]]), np.array([droll[i], dpitch[i], dyaw[i]])),
                    #(np.array([ddx[i], ddy[i], ddz[i]]), np.array([ddroll[i], ddpitch[i], ddyaw[i]])))
        # Advances the simulation by calling mj_step
        sim.step()
        viewer.render()
